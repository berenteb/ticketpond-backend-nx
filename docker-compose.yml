name: ticketpond-dev
services:
  database:
    image: postgres:latest
    restart: unless-stopped
    ports:
      - '5432:5432'
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - db:/var/lib/postgresql/data
  kafka:
    image: bitnami/kafka
    restart: unless-stopped
    ports:
      - '9092:9092'
    environment:
      KAFKA_CFG_NODE_ID: ${KAFKA_CFG_NODE_ID:-0}
      KAFKA_CFG_PROCESS_ROLES: ${KAFKA_CFG_PROCESS_ROLES:-controller,broker}
      KAFKA_CFG_LISTENERS: ${KAFKA_CFG_LISTENERS:-PLAINTEXT://:9092,CONTROLLER://:9093,INTERNAL://:9094}
      KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP: ${KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP:-CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT,INTERNAL:PLAINTEXT}
      KAFKA_CFG_CONTROLLER_QUORUM_VOTERS: ${KAFKA_CFG_CONTROLLER_QUORUM_VOTERS:-0@kafka:9093}
      KAFKA_CFG_CONTROLLER_LISTENER_NAMES: ${KAFKA_CFG_CONTROLLER_LISTENER_NAMES:-CONTROLLER}
      KAFKA_CFG_ADVERTISED_LISTENERS: ${KAFKA_CFG_ADVERTISED_LISTENERS:-PLAINTEXT://${KAFKA_BROKER},INTERNAL://kafka:9094}
      ALLOW_PLAINTEXT_LISTENER: ${ALLOW_PLAINTEXT_LISTENER:-yes}
  kafka-ui:
    container_name: kafka-ui
    restart: unless-stopped
    image: provectuslabs/kafka-ui:latest
    depends_on:
      - kafka
    ports:
      - 8080:8080
    environment:
      KAFKA_CLUSTERS_0_NAME: ${KAFKA_CLUSTERS_0_NAME:-local}
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: ${KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS:-kafka:9094}
# Services:
  cart:
    image: ticketpond-cart:latest
    restart: unless-stopped
    environment:
      KAFKA_BROKER: ${KAFKA_BROKER}
      DATABASE_URL: ${DATABASE_URL}
    depends_on:
      - database
      - kafka
  customer:
    image: ticketpond-customer:latest
    restart: unless-stopped
    environment:
      KAFKA_BROKER: ${KAFKA_BROKER}
      DATABASE_URL: ${DATABASE_URL}
    depends_on:
      - database
      - kafka
  experience:
    image: ticketpond-experience:latest
    restart: unless-stopped
    environment:
      KAFKA_BROKER: ${KAFKA_BROKER}
      DATABASE_URL: ${DATABASE_URL}
    depends_on:
      - database
      - kafka
  gateway:
    image: ticketpond-authentication:latest
    restart: unless-stopped
    ports:
      - '3001:3001'
    environment:
      HOST: authentication
      PORT: 3001
      KAFKA_BROKER: ${KAFKA_BROKER}
      FRONTEND_URL: ${FRONTEND_URL}
      AUTH0_ISSUER_URL: ${AUTH0_ISSUER_URL}
      AUTH0_AUDIENCE: ${AUTH0_AUDIENCE}
      DATABASE_URL: ${DATABASE_URL}
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
    volumes:
      - static:/static
    depends_on:
      - database
      - kafka
  merchant:
    image: ticketpond-merchant:latest
    restart: unless-stopped
    environment:
      KAFKA_BROKER: ${KAFKA_BROKER}
      DATABASE_URL: ${DATABASE_URL}
    depends_on:
      - database
      - kafka
  notification:
    image: ticketpond-notification:latest
    restart: unless-stopped
    environment:
      KAFKA_BROKER: ${KAFKA_BROKER}
      EMAIL_HOST: ${EMAIL_HOST}
      EMAIL_PORT: ${EMAIL_PORT}
      EMAIL_SECURE: ${EMAIL_SECURE}
      EMAIL_USERNAME: ${EMAIL_USERNAME}
      EMAIL_PASSWORD: ${EMAIL_PASSWORD}
      EMAIL_FROM_NAME: ${EMAIL_FROM_NAME}
      EMAIL_FROM_ADDRESS: ${EMAIL_FROM_ADDRESS}
    depends_on:
      - kafka
  order:
    image: ticketpond-order:latest
    restart: unless-stopped
    environment:
      KAFKA_BROKER: ${KAFKA_BROKER}
      DATABASE_URL: ${DATABASE_URL}
    depends_on:
      - database
      - kafka
  pass:
    image: ticketpond-pass:latest
    restart: unless-stopped
    environment:
      KAFKA_BROKER: ${KAFKA_BROKER}
      WALLET_PASS_TYPE_IDENTIFIER: ${WALLET_PASS_TYPE_IDENTIFIER}
      WALLET_ORGANIZATION_NAME: ${WALLET_ORGANIZATION_NAME}
      WALLET_TEAM_IDENTIFIER: ${WALLET_TEAM_IDENTIFIER}
      WALLET_PASSPHRASE: ${WALLET_PASSPHRASE}
    volumes:
      - static:/static
    depends_on:
      - kafka
  payment:
    image: ticketpond-payment:latest
    restart: unless-stopped
    environment:
      KAFKA_BROKER: ${KAFKA_BROKER}
      STRIPE_SECRET_KEY: ${STRIPE_SECRET_KEY}
      STRIPE_WEBHOOK_ENDPOINT_SECRET: ${STRIPE_WEBHOOK_ENDPOINT_SECRET}
    depends_on:
      - kafka
  ticket:
    image: ticketpond-ticket:latest
    restart: unless-stopped
    environment:
      KAFKA_BROKER: ${KAFKA_BROKER}
      DATABASE_URL: ${DATABASE_URL}
    depends_on:
      - database
      - kafka
volumes:
  db:
  static:

